// set up the size of the window
int window_width = 600;
int window_height = 700;
int clip_size_incremental = 20;
int clip_size = clip_size_incremental;
int clip_size_max = 60;
int incremental = 20;
int enemy_incremental_multiplier = 2;
int enemy_incremental = enemy_incremental_multiplier;
int bullet_incremental = 10;
int i;
int current_bullet = 0;
int current_boss_bullet = 0;
int boss_clip_size = 100;
int score = 0;
int random_number;
int recharge = 0;
int current_recharge_time = 1000;
int recharge_time = 1000;
int recharge_rate = 10;
int round1 = 1;
int round2 = 0;
int round3 = 0;
int round4 = 0;
int round5 = 0;
int round6 = 0;
int round7 = 0;
int health_bonus_min = 0;
int health_bonus_max = 10;
int num_enemies_increment = 10;
int num_enemies = num_enemies_increment;
int num_enemies_max = num_enemies*4;
int bar_width = -240;
int bar_height = 15;
int enemy_counter = 0;
int dead_enemy_count = 0;
int shield_bonus_min = 100;
int shield_bonus_max = 104;
int shoot_down_enabled = 0;
int paused = true;
int num_instructions =8;
int level = 0;
int boss_threshold = 150;
string title = "INVASION";
forward animation shoot_up(circle bullet_up);
forward animation recharge_animation(pixmap ship);
forward animation charged(pixmap charged_ship);
forward animation enemy_down(circle enemy_c);
forward animation enemy_left_2x(circle enemy_l2x);
forward animation enemy_right_2x(circle enemy_r2x);
forward animation enemy_up(circle enemy_u);
forward animation score_box_animation(textbox score_b);
forward animation health_bonus_active(pixmap hba);
forward animation shield_bonus_active(pixmap sba);
forward animation shoot_down(circle bullet_down);
forward animation enemy_random(circle enemy_r);
forward animation rounds_update(textbox rounds);
forward animation boss_fight(circle boss_f);
forward animation boss_shoot_up(circle boss_bullet_up);
forward animation boss_shoot_down(circle boss_bullet_down);
forward animation none(circle c);
pixmap background(filename="background.bmp", drawing_order=0);
textbox score_box(animation_block=score_box_animation,x=window_width/2 -100, y=window_height-20, size=0.2, text="Score: 0", drawing_order=4, red=255);
textbox more_enemies(x = 0, y=window_height-10, size =0.1, text="more enemies active", visible=false, drawing_order=5, red=255);
textbox faster_enemies(x = 20, y=window_height - 30, size = 0.1, visible=false, drawing_order=5,red=255);
textbox more_bullets(x = 40, y=window_height - 50, size=0.1, visible=false, drawing_order=5, red=255);
textbox instructions[num_instructions];
textbox title_box(text=title, x=20, y=window_height-100, red=1, green=0, blue=0, size = 0.9, drawing_order=10);
textbox level_box(animation_block=rounds_update,text = "Survived Rounds: " + level, size = 0.2, x = window_width - 330, drawing_order = 4, red=1, green=0, blue=0);
textbox victory(visible = false,x = 20, y=window_height/2, size=1, text="Victory", red=1, blue=0, green=0, drawing_order=10);
pixmap space_ship(filename="ship5.bmp", animation_block=charged, drawing_order=5);
pixmap health_bonus(filename="medkit.bmp",visible=false, drawing_order=5);
circle bullets[clip_size_max];
circle boss_bullets[boss_clip_size];
pixmap enemies[num_enemies_max];
rectangle health_bar(w=bar_width, h=bar_height, x=window_width, y=window_height - 15, drawing_order=4);
rectangle energy_bar(w=bar_width, h=bar_height, x =window_width, y=window_height - 30, red=1, green=1, blue=0, drawing_order=4);
rectangle shield_bar(visible=false, w=bar_width, h=bar_height, x=window_width, y=window_height - 45, red = 0, green = 0, blue = 1.0, drawing_order=5);
rectangle boss_bar(visible = false, w=bar_width/2, h=bar_height, drawing_order=5, red=1, blue=0, green=0);
pixmap shield_bonus(filename="shield.bmp", visible=false, drawing_order=5);
rectangle pause_block(w = window_width, h=window_height, red=0, green=0, blue=0, drawing_order=9);

pixmap boss(filename = "boss.bmp", x=window_width/2, y=window_height - 100, drawing_order=5, visible=false);

initialization
{
	//initialize bullets
	for(i = 0; i < clip_size_max; i += 1)
	{
		bullets[i].radius = 5;
		bullets[i].visible = false;
		bullets[i].drawing_order = 5;

	}

	//initialize enemies.
	for(i = 0; i<num_enemies_max; i +=1)
	{
		enemies[i].visible=false;
		enemies[i].proximity = -5;
		enemies[i].drawing_order = 5;
		enemies[i].filename = "enemy2.bmp";
		if(i < num_enemies)
		{
			enemies[i].visible=true;
			enemies[i].animation_block=enemy_down;				
			enemies[i].x =random(window_width-20) +10;
			enemies[i].y = window_height - 20;
		}

	}
	//initialize instructions
	for(i = 0; i<num_instructions; i+= 1)
	{
		instructions[i].x = 20;
		instructions[i].size = .2;
		instructions[i].drawing_order = 10;
		instructions[i].red=1;
		instructions[i].green=1;
		instructions[i].blue=1;
		if(i == 0)
		{
			instructions[i].y = 3*window_height/4;
			instructions[i].text="W - Shoot Up";
		}
		else if (i==1)
		{
			instructions[i].y = 3*window_height/4 - 30;
			instructions[i].text="S - Shoot Down (once it's enabled)";
		}
		else if (i==2)
		{
			instructions[i].y = 3*window_height/4 - 60;
			instructions[i].text="D - Pause/Unpause";
		}
		else if (i==3)
		{
			instructions[i].y = 3*window_height/4 - 120;
			instructions[i].text="Arrow Keys - Movement";
		}
		else if(i==4)
		{
			instructions[i].y = 3*window_height/4 - 90;
			instructions[i].text="A - Recharge Blasters";	
		}
		else if (i==5)
		{
			instructions[i].y = 3*window_height/4 - 150;
			instructions[i].text="D to Start & Q to Quit ";	
		}
		else if (i==6)
		{
			instructions[i].y = 3*window_height/4 - 180;
			instructions[i].red = 0;
			instructions[i].blue = 0;
			instructions[i].text="Player Bonuses: 250/500";
		}
		else
		{
			instructions[i].green = 0;
			instructions[i].blue = 0;
			instructions[i].y = 3*window_height/4 - 210;
			instructions[i].size = .15;
			instructions[i].text="Enemy Bonuses: 50/100/250/350/400/500 ";
		}	

	}

	for(i=0;i<boss_clip_size; i += 1)
	{
		boss_bullets[i].radius = 5;
		boss_bullets[i].visible = false;
		boss_bullets[i].drawing_order = 5;
		boss_bullets[i].red = 1;
		boss_bullets[i].green = 0;
		boss_bullets[i].blue = 0;
	}
}

on uparrow
{	
	if (paused == false)
	{
		space_ship.y = space_ship.y + incremental;
	}
}

on leftarrow
{
	if (paused == false)
	{
		space_ship.x = space_ship.x - incremental;
	}
}

on rightarrow
{
	if (paused == false)
	{
		space_ship.x = space_ship.x + incremental;
	}
}

on downarrow
{
	if (paused == false)
	{
		space_ship.y = space_ship.y - incremental;	
	}
}

on wkey
{
	if (paused == false && recharge == false)
	{
		if(current_bullet < clip_size)
		{
			bullets[current_bullet].x = space_ship.x + 25;
			bullets[current_bullet].y = space_ship.y;
			bullets[current_bullet].visible = true;
			bullets[current_bullet].animation_block = shoot_up;
			current_bullet += 1;
			energy_bar.w -= floor(bar_width/clip_size);
		}
		else if(recharge == 0)
		{
			recharge = 1;
			energy_bar.animation_block = recharge_animation;
		}
	}
}

on skey
{
	if (paused == false && recharge == false)
	{
		if(shoot_down_enabled == 1)
		{
			if(current_bullet < clip_size)
			{
				bullets[current_bullet].x = space_ship.x + 25;
				bullets[current_bullet].y = space_ship.y;
				bullets[current_bullet].visible = true;
				bullets[current_bullet].animation_block = shoot_down;
				current_bullet += 1;
				energy_bar.w -= floor(bar_width/clip_size);
			}
			else if(recharge == 0)
			{
				recharge = 1;
				energy_bar.animation_block = recharge_animation;
			}
		}
	}
}

on dkey
{
	if(paused == false)
	{
		paused = true;
		pause_block.visible=true;
		title_box.visible = true;
		for(i=0; i<num_instructions; i +=1)
		{
			instructions[i].visible = true;
		}

	}
	else
	{
		paused = false;
		pause_block.visible=false;
			title_box.visible = false;
		for(i=0; i<num_instructions; i +=1)
		{
			instructions[i].visible = false;
		}
	}
}

on akey
{
	if(recharge == 0)
		{
			energy_bar.w = 0;
			recharge = 1;
			energy_bar.animation_block = recharge_animation;
		}
}

animation shoot_up(circle bullet_up)
{
	if (paused == false)
	{
		bullet_up.y = bullet_up.y + bullet_incremental;
		if(bullet_up.y > window_height)
		{
			bullet_up.visible = 0;
		}
		for(i=0; i<num_enemies; i += 1)
		{
			if(enemies[i] touches bullet_up)
			{
				enemies[i].x = -1000;
				enemies[i].visible = false;
				bullet_up.visible = false;
				dead_enemy_count += 1;
				score += 2;
			}
		}
		if(boss touches bullet_up)
		{
			bullet_up.x = -1000;
			bullet_up.visible = false;
			boss_bar.w -= (bar_width/2)/30;
			score += 10;
			if(boss_bar.w >= 0)
			{
				boss.animation_block = none;
				boss.visible = false;
				victory.visible = true;
				background.visible = false;
				boss_bar.visible = false;
			}
		}
	}
}

animation shoot_down(circle bullet_down)
{
	if (paused == false)
	{
		bullet_down.y = bullet_down.y - bullet_incremental;
		if(bullet_down.y < 0)
		{
			bullet_down.visible = false;
		}
		for(i=0; i<num_enemies; i += 1)
		{
			if(enemies[i] touches bullet_down)
			{
				enemies[i].x = -1000;
				enemies[i].visible = false;
				bullet_down.visible = false;
				dead_enemy_count += 1;
				score += 2;
			}
		}
		if(boss touches bullet_down)
		{
			bullet_down.x = -1000;
			bullet_down.visible = false;
			boss_bar.w -= (bar_width/2)/30;
			if(boss_bar.w >= 0)
			{
				boss.animation_block = none;
				boss.visible = false;
				victory.visible = true;
				background.visible = false;
			}
		}
	}
}

animation recharge_animation(pixmap ship)
{
	if(paused == false)
	{
		if(recharge == 1)
		{
			current_recharge_time -= recharge_rate;
			if(current_recharge_time == 0)
			{
				current_bullet = 0;
				energy_bar.w = bar_width;
				current_recharge_time = recharge_time;
				energy_bar.animation_block = none;
				recharge = 0;
			}
		}
	}
}

animation charged(pixmap charged_ship)
{
	if (paused == false)
	{
		//handle x boundries
		if(charged_ship.x < 0)
		{
			charged_ship.x = window_width;
		}
		else if(charged_ship.x > window_width)
		{
			charged_ship.x = 0;
		}

		//handle y boundries
		if(charged_ship.y > window_height)
		{
			charged_ship.y = 0;
		}
		else if(charged_ship.y < 0)
		{
			charged_ship.y = window_height;
		}

		//handle collisions
		for(i = 0; i < num_enemies; i += 1)
		{
			if(charged_ship touches enemies[i])
			{
				enemies[i].visible = 0;
				enemies[i].y = window_height -  10;
				if(shield_bar.visible == false)
				{
					health_bar.w -= bar_width/30;
				}
				else
				{
					shield_bar.w -= bar_width/15;
					if(shield_bar.w >= 0)
					{
						shield_bar.visible = false;
					}
				}
				
				dead_enemy_count += 1;
				if(health_bar.w >= 0)
				{
					exit(1);	
				}
			}
		}

		//spawn powerups 
		random_number = random(2000);
		if(random_number >= health_bonus_min && random_number < health_bonus_max && health_bonus.visible==false)
		{
			health_bonus.x = random(window_width - 20) + 10;
			health_bonus.y = random(window_height - 70) + 10;
			health_bonus.visible = true;
			health_bonus.animation_block = health_bonus_active;
		}
		else if(random_number >= shield_bonus_min && random_number < shield_bonus_max && shield_bonus.visible == false && shield_bar.visible == false)
		{
			shield_bonus.x = random(window_width - 20) + 10;
			shield_bonus.y = random(window_height - 70) + 10;
			shield_bonus.visible = true;
			shield_bonus.animation_block = shield_bonus_active;
		}

		//change game based on score.
		if(score >= 500 && num_enemies < num_enemies_max)
		{
			num_enemies += num_enemies_increment;
			more_enemies.text = "4x Enemies Active";

			clip_size += clip_size_incremental;
			more_bullets.visible = true;
			more_bullets.text = "3x Clip Size!! And Rear Blasters are Enabled (S key)";
			health_bonus_max += 5;
			shield_bonus_max += 5;
		}
		else if(score >= 400 && enemy_incremental < enemy_incremental_multiplier*4)
		{
			enemy_incremental += enemy_incremental_multiplier;
			faster_enemies.text = "4x faster enemies";
			health_bonus_max += 10;
		}
		else if(score >= 350 && num_enemies < num_enemies_increment*3)
		{
			num_enemies += num_enemies_increment;
			more_enemies.text = "3x Enemies Active";
			shield_bonus_max += 10;
		}
		else if(score >= 250 && enemy_incremental < enemy_incremental_multiplier*3)
		{
			enemy_incremental += enemy_incremental_multiplier;
			faster_enemies.text = "3x faster enemies";
			clip_size += clip_size_incremental;
			more_bullets.visible = true;
			more_bullets.text = "2x Clip Size!!";
			more_bullets.text += " And Rear Blasters are Enabled (S key)";
			shoot_down_enabled = 1;
		}
		else if(score >= 100 && num_enemies < num_enemies_increment*2)
		{
			num_enemies += num_enemies_increment;
			more_enemies.visible = true;
			more_enemies.text = "2x Enemies Active";
		}
		else if(score >= 50 && enemy_incremental < enemy_incremental_multiplier*2)
		{
			enemy_incremental += enemy_incremental_multiplier;
			faster_enemies.visible = true;
			faster_enemies.text = "2x faster enemies";
		}

		//if enough enemies are dead start the next round
		if(dead_enemy_count >= 8*num_enemies/10)
		{
			level += 1;
			if(score < boss_threshold)
			{
				if(round1 ==1)
					{
						for(i = 0; i < num_enemies; i +=1)
						{
							enemies[i].x =random(window_width-20) +10;
							enemies[i].y = window_height - 20;
							enemies[i].visible = true;
						}
						dead_enemy_count = 0;
						round1 = 0;
						round2 = 1;
					}
					else if (round2 == 1)
					{
						round2 = 0;
						dead_enemy_count = 0;
						round3 = 1;
						for(i = 0; i<num_enemies; i += 1)
						{
							if(i < num_enemies/2)
							{
								enemies[i].y = window_height - 200;
								enemies[i].x = random(window_width/2);
								enemies[i].visible = true;
								enemies[i].animation_block = enemy_left_2x;
							}
							else
							{
								enemies[i].y = window_height - 200;
								enemies[i].x = random(window_width/2) + window_width/2;
								enemies[i].visible = true;
								enemies[i].animation_block = enemy_right_2x;
							}
						}
					}
					else if (round3 == 1)
					{
						for(i = 0; i < num_enemies; i += 1)
						{
							enemies[i].visible = true;
							enemies[i].x = random(window_width - 20) + 10;
							enemies[i].y = window_height - 20;
							enemies[i].animation_block = enemy_down;
						}
						round3 = 0;
						round4 = 1;
						dead_enemy_count=0;
					}
					else if (round4 == 1)
					{
						for(i=0; i < num_enemies; i += 1)
						{
							enemies[i].visible = true;
							if(num_enemies < enemy_incremental*2)
							{
								if(i < num_enemies/3)
								{
									enemies[i].animation_block = enemy_down;
								}
								else if(i < 2*num_enemies/3)
								{
									enemies[i].animation_block=enemy_left_2x;
								}
								else
								{
									enemies[i].animation_block=enemy_right_2x;

								}	
							}
							else
							{
								if(i < num_enemies/4)
								{
									enemies[i].animation_block = enemy_down;
								}
								else if(i < 2*num_enemies/4)
								{
									enemies[i].animation_block=enemy_left_2x;
								}
								else if(i < 3*num_enemies/4)
								{
									enemies[i].animation_block=enemy_right_2x;

								}
								else
								{
									enemies[i].animation_block=enemy_up;
								}

							}

						}
						dead_enemy_count = 0;
						round4 = 0;
						round5 = 1;
					}
					else if(round5 == 1)
					{
						for(i=0; i< num_enemies; i +=1)
						{
							enemies[i].visible = true;
							if(i < num_enemies/2)
							{
								enemies[i].y = 20;
								enemies[i].x = random(window_width - 20) + 10;
								enemies[i].animation_block=enemy_up;
							}
							else
							{
								enemies[i].y = window_height - 20;
								enemies[i].x = random(window_width -20) + 10;
								enemies[i].animation_block=enemy_down;
							}
						}
						dead_enemy_count = 0;
						round5 = 0;
						round6 = 1;
					}
					else if(round6 == 1)
					{
						for(i=0; i < num_enemies; i += 1)
						{
							enemies[i].visible = true;
							enemies[i].x = random(window_width - 20) + 10;
							enemies[i].y = random(window_height - 15) + 7;
							enemies[i].animation_block=enemy_random;
						}
						dead_enemy_count = 0;
						round6 = 0;
						round7 = 1;

					}
					else if(round7 == 1)
					{
						for(i=0; i < num_enemies; i += 1)
						{
							enemies[i].visible = true;
							enemies[i].x = random(window_width - 20) + 10;
							enemies[i].y = random(window_height - 15) + 7;
							random_number = random(5);
							if(random_number == 0)
							{
								enemies[i].animation_block=enemy_random;
							}
							else if(random_number == 1)
							{
								enemies[i].animation_block=enemy_up;
							}
							else if(random_number == 2)
							{
								enemies[i].animation_block=enemy_down;	
							}
							else if(random_number == 3)
							{
								enemies[i].animation_block=enemy_left_2x;	
							}
					else if(random_number == 4)
					{
						enemies[i].animation_block=enemy_right_2x;	
					}
					}
					dead_enemy_count = 0;
					round7 = 0;
					round1 = 1	;			
				}
			}
			else
			{
				dead_enemy_count=0;
				for(i = 0; i <num_enemies; i += 1)
				{
					enemies[i].visible = false;
					enemies[i].x = -1000;
				}
				boss.visible = true;
				boss.animation_block = boss_fight;
				boss_bar.x = boss.x + boss.w;
				boss_bar.y = boss.y + boss.h;
				boss_bar.visible = true;
			}	
		}
			
	}	
}
//animate enemies to move down
animation enemy_down(circle enemy_c)
{
	if (paused == false)
	{
		enemy_c.y -= enemy_incremental;
		if(enemy_c.y < 0)
		{
			enemy_c.y = window_height;
		}
		if(enemy_c.x < 0 || enemy_c.x > window_width)
		{
			enemy_c.x = random(window_width - 20) + 10;
		}
	}
}

animation enemy_random(circle enemy_r)
{
	if(paused == false)
	{
			random_number = random(2);
			if(random_number == 0)
			{
				enemy_r.x += random(enemy_incremental*5);
				enemy_r.y += random(enemy_incremental*5);	
			}
			else
			{
				enemy_r.x -= random(enemy_incremental*5);
				enemy_r.y -= random(enemy_incremental*5);
			}

			if(enemy_r.x < 0 || enemy_r.y < 0 || enemy_r.x > window_width || enemy_r.y > window_height)
			{
				enemy_r.x = random(window_width - 20) + 10;
				enemy_r.y = random(window_height - 15) + 7;

			}

	}
}
//animate linear path from left to right
animation enemy_left_2x(circle enemy_l2x)
{
	if (paused == false)
	{
		enemy_l2x.x += enemy_incremental;
		enemy_l2x.y -= enemy_incremental;
		if(enemy_l2x.y < 0 )
		{
			enemy_l2x.y = window_height;
		}
		else if (enemy_l2x.x > window_width)
		{
			enemy_l2x.x = 0;

		}
	}
}

//animate linear path from right to left
animation enemy_right_2x(circle enemy_r2x)
{
	if (paused == false)
	{
		enemy_r2x.x -= enemy_incremental;
		enemy_r2x.y -= enemy_incremental;
		if(enemy_r2x.y < 0)
		{
			enemy_r2x.y = window_height;
			
		}
		else if(enemy_r2x.x < 0)
		{
			enemy_r2x.x = window_width;
		}
	}
}
//animiate path straight up
animation enemy_up(circle enemy_u)
{
	if (paused == false)
	{
		enemy_u.y += enemy_incremental;
		if(enemy_u.y > window_height)
		{
			enemy_u.y = 0;
		}
		if(enemy_c.x < 0 || enemy_c.x > window_width)
		{
			enemy_c.x = random(window_width - 20) + 10;
		}
	}
}

//keep scorebox updated
animation score_box_animation(textbox score_b)
{
	score_b.text = "Score: " + score;
}

//wait for health bonus to be collected
animation health_bonus_active(pixmap hba)
{
	if (paused == false)
	{
		if(space_ship touches hba)
		{
			health_bar.w = bar_width;
			health_bonus.visible = false;
		}
	}
}

//wait for shield bonus to be collected
animation shield_bonus_active(pixmap sba)
{
	if (paused == false)
	{
		if(space_ship touches sba)
		{	
			shield_bar.visible = true;
			shield_bar.w = bar_width;
			shield_bonus.visible = false;
		}
	}
}

animation rounds_update(textbox rounds)
{
	rounds.text = "Rounds Survived: " + level;
}

animation boss_fight(circle boss_f)
{
	random_number = random(100);
	if(boss_f.x < space_ship.x)
	{
		boss_f.x += 3;
		boss_bar.x+=3;
	}
	else if (boss_f.x > space_ship.x)
	{
		boss.x -=3;
		boss_bar.x -=3;
	}
	if(boss_f.y < space_ship.y)
	{
		boss_f.y += 3;
		boss_bar.y +=3;
		if(random_number < 6)
		{
			boss_bullets[current_boss_bullet].x = boss_f.x + 30;
			boss_bullets[current_boss_bullet].y = boss_f.y;
			boss_bullets[current_boss_bullet].visible = true;
			boss_bullets[current_boss_bullet].animation_block = boss_shoot_up;
			if(current_boss_bullet >= boss_clip_size)
			{
				current_boss_bullet = 0;
			}
		}
	}
	else if(boss_f.y > space_ship.y)
	{
		boss_f.y -= 3;
		boss_bar.y -= 3;
		if(random_number < 6)
		{
			boss_bullets[current_boss_bullet].x = boss_f.x + 30;
			boss_bullets[current_boss_bullet].y = boss_f.y;
			boss_bullets[current_boss_bullet].visible = true;
			boss_bullets[current_boss_bullet].animation_block = boss_shoot_down;
			current_boss_bullet += 1;
			if(current_boss_bullet >= boss_clip_size)
			{
				current_boss_bullet = 0;
			}

		}
	}

	if(boss_f touches space_ship)
	{
		if(shield_bar.w >=0)
		{
			health_bar.w -= health_bar.w/30;
		}
		else
		{
			shield_bar.w -= shield_bar.w/12;
		}
	}
}

animation boss_shoot_up(circle boss_bullet_up)
{
	boss_bullet_up.y += 7;
	if(boss_bullet_up touches space_ship)
	{
		boss_bullet_up.x = -1000;
		boss_bullet_up.visible = false;
		if(shield_bar.w >= 0)
		{
			health_bar.w -= health_bar.w/15;
		}
		else
		{
			shield_bar.w -= shield_bar.w/15;
		}
	}
	else if(boss_bullet_up.y > window_height)
	{
		boss_bullet_up.visible = false;	
	}
}

animation boss_shoot_down(circle boss_bullet_down)
{
	boss_bullet_down.y -= 7;
	if(boss_bullet_down touches space_ship)
	{
		boss_bullet_down.x = -1000;
		boss_bullet_down.visible = false;
		health_bar.w -= health_bar.w/15;
	}
	else if(boss_bullet_down.y < 0)
	{
		boss_bullet_down.visible = false;	
	}
}
//since I don't have null to work with.
animation none(circle c)
{}
